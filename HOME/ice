    //
 // Stock stock = new Stock();
 //     stock.setBalls(2);
 //             stock.setIceRockets(1);
 //             stock.setMagni(2);


 //             IceCreamCar iceCreamCar = new IceCreamCar(priceList, stock);

 //             Cone.Flavor[] balls = {null};
 //             Cone.Flavor[] balls2 = {
 //             Cone.Flavor.STRAWBERRY,
 //             Cone.Flavor.BANANA,
 //             Cone.Flavor.CHOCOLATE,
 //             Cone.Flavor.VANILLA
 //             };
 //             Cone.Flavor[] balls3 = {
 //             Cone.Flavor.PISTACHE,
 //             Cone.Flavor.BANANA,
 //             Cone.Flavor.BANANA,
 //             Cone.Flavor.STRAWBERRY,
 //             Cone.Flavor.CHOCOLATE,
 //             Cone.Flavor.PISTACHE

 //             };

 //             //Order ice cream
 //             List<Eatable> orderedIceCream=flavorsList.stream
 //     .map(iceCreamCar::orderCone)
 //     .collect(Collections.toList());



 //     //order
 //     //  Cone cone = iceCreamCar.orderCone(balls);
 //     //  Cone cone1 = iceCreamCar.orderCone(balls2);
 //     //  Cone cone2 = iceCreamCar.orderCone(balls3);

 //     IceRocket iceRocket = iceCreamCar.orderIceRocket();
 //     IceRocket iceRocket2 = iceCreamCar.orderIceRocket();

 //     Magnum magnum = iceCreamCar.orderMagnum(Magnum.MagnumType.APLINENUTS);
 //     Magnum magnum2 = iceCreamCar.orderMagnum(Magnum.MagnumType.ROMANTICSTRAWBERRIES);
 //     Magnum magnum3 = iceCreamCar.orderMagnum(Magnum.MagnumType.BLACKCHOCOLATE);

 //     eatable[0] = cone;
 //     eatable[1] = cone1;
 //     eatable[2] = cone2;
 //     eatable[3] = iceRocket;
 //     eatable[4] = iceRocket2;
 //     eatable[5] = magnum;
 //     eatable[6] = magnum2;
 //     eatable[7] = magnum3;


 //     // Set the array based on the ordered ice cream
 //     eatable=orderedIceCream.toArray(new Eatable[0]);

 //     Arrays.stream(eatable)
 //     .filter((e->e != null)
 //     .for

 //     //use streams to filter out null elements and call the eat() o, each Eatable object
 //     Stream.of(eatable)
 //     .filter(Objects::nonNull)
 //     .forEach(Eatable::eat);

 //     }
